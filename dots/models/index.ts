/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ErrorEscaped}
 */
// @ts-ignore
export function createErrorEscapedFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoErrorEscaped;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SshKeys}
 */
// @ts-ignore
export function createSshKeysFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSshKeys;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoErrorEscaped(errorEscaped: Partial<ErrorEscaped> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { errorEscaped.id = n.getStringValue(); },
        "message": n => { errorEscaped.messageEscaped = n.getStringValue(); },
        "request_id": n => { errorEscaped.requestId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSshKeys(sshKeys: Partial<SshKeys> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fingerprint": n => { sshKeys.fingerprint = n.getStringValue(); },
        "id": n => { sshKeys.id = n.getNumberValue(); },
        "name": n => { sshKeys.name = n.getStringValue(); },
        "public_key": n => { sshKeys.publicKey = n.getStringValue(); },
    }
}
export interface ErrorEscaped extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be "not_found."
     */
    id?: string | null;
    /**
     * A message providing additional information about the error, including  details to help resolve it when possible.
     */
    messageEscaped?: string | null;
    /**
     * Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.
     */
    requestId?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeErrorEscaped(writer: SerializationWriter, errorEscaped: Partial<ErrorEscaped> | undefined | null = {}) : void {
    if (errorEscaped) {
        writer.writeStringValue("id", errorEscaped.id);
        writer.writeStringValue("message", errorEscaped.messageEscaped);
        writer.writeStringValue("request_id", errorEscaped.requestId);
        writer.writeAdditionalData(errorEscaped.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSshKeys(writer: SerializationWriter, sshKeys: Partial<SshKeys> | undefined | null = {}) : void {
    if (sshKeys) {
        writer.writeStringValue("name", sshKeys.name);
        writer.writeStringValue("public_key", sshKeys.publicKey);
        writer.writeAdditionalData(sshKeys.additionalData);
    }
}
export interface SshKeys extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
     */
    fingerprint?: string | null;
    /**
     * A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
     */
    id?: number | null;
    /**
     * A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
     */
    name?: string | null;
    /**
     * The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
     */
    publicKey?: string | null;
}
/* tslint:enable */
/* eslint-enable */
